[==========] Running 6 tests from 1 test case.
[----------] Global test environment set-up.
[----------] 6 tests from TestCgShader
[ RUN      ] TestCgShader.TestGenPrototype1
[       OK ] TestCgShader.TestGenPrototype1
[ RUN      ] TestCgShader.TestGenPrototype2
[       OK ] TestCgShader.TestGenPrototype2
[ RUN      ] TestCgShader.TestGenKernelFunc
TestGenPrototype1:
void func(uniform float x1, point x2, float[3] x3, point P, uniform float param)
TestGenPrototype2:
void func(uniform float f, uniform point p, uniform matrix m, uniform string str, uniform float[3] fa, uniform point[3] pa, uniform string[3] sa)
TestGenKernelFunc:

define void @func_kernel(float* noalias nocapture %_f, %class.OpVec3* noalias nocapture %_p, %class.OpMatrix4* noalias nocapture %_m, i8** noalias nocapture %_str, [3 x float]* noalias nocapture %_fa, [3 x %class.OpVec3]* noalias nocapture %_pa, [3 x i8*]* noalias nocapture %_sa) {
entry:
}
[       OK ] TestCgShader.TestGenKernelFunc
[ RUN      ] TestCgShader.TestGenPluginCall
TestGenPluginCall:
TT_0 = func(f, p, m, str, fa, pa, sa);
[       OK ] TestCgShader.TestGenPluginCall
[ RUN      ] TestCgShader.TestCodegenPartition

define i32 @TestCgShader1(%class.RslContext.1* nocapture %rslContext, i32 %argc, %class.RslArg.4** nocapture %argv) nounwind uwtable readnone {
  %_Ps_iter = alloca %struct.CgIter
  %_Cs_iter = alloca %struct.CgIter
  %_Ci_iter = alloca %struct.CgIter
  %_b_iter = alloca %struct.CgIter
  %_a_iter = alloca %struct.CgIter
  call void @CgGetIter(%class.RslArg.4** %argv, i32 1, %struct.CgIter* %_a_iter)
  call void @CgGetIter(%class.RslArg.4** %argv, i32 2, %struct.CgIter* %_b_iter)
  call void @CgGetIter(%class.RslArg.4** %argv, i32 3, %struct.CgIter* %_Ci_iter)
  call void @CgGetIter(%class.RslArg.4** %argv, i32 4, %struct.CgIter* %_Cs_iter)
  call void @CgGetIter(%class.RslArg.4** %argv, i32 5, %struct.CgIter* %_Ps_iter)
  %1 = call i32 @CgNumValues(%class.RslArg.4** %argv, i32 0)
  br label %test

test:                                             ; preds = %body, %0
  %index = phi i32 [ 0, %0 ], [ %8, %body ]
  %2 = icmp slt i32 %index, %1
  br i1 %2, label %body, label %done

body:                                             ; preds = %test
  %3 = call float* @CgDerefIter(%struct.CgIter* %_a_iter)
  %4 = call float* @CgDerefIter(%struct.CgIter* %_b_iter)
  %5 = call float* @CgDerefIter(%struct.CgIter* %_Ci_iter)
  %_Ci_ptr = bitcast float* %5 to %class.OpVec3*
  %6 = call float* @CgDerefIter(%struct.CgIter* %_Cs_iter)
  %_Cs_ptr = bitcast float* %6 to %class.OpVec3*
  %7 = call float* @CgDerefIter(%struct.CgIter* %_Ps_iter)
  %_Ps_ptr = bitcast float* %7 to %class.OpVec3*
  call void @TestCgShader1_kernel(float* %3, float* %4, %class.OpVec3* %_Ci_ptr, %class.OpVec3* %_Cs_ptr, %class.OpVec3* %_Ps_ptr)
  call void @CgIncIter(%struct.CgIter* %_a_iter)
  call void @CgIncIter(%struct.CgIter* %_b_iter)
  call void @CgIncIter(%struct.CgIter* %_Ci_iter)
  call void @CgIncIter(%struct.CgIter* %_Cs_iter)
  call void @CgIncIter(%struct.CgIter* %_Ps_iter)
  %8 = add i32 %index, 1
  br label %test

done:                                             ; preds = %test
  ret i32 0
}
TestCodegenParition:
TT_0 = TestCgShader1(a, b, Ci, Cs, Ps);
[       OK ] TestCgShader.TestCodegenPartition
[ RUN      ] TestCgShader.TestShaders
---------- TestCgShader1.slo ----------
@.str6 = private unnamed_addr constant [19 x i8] c"1 value:\0A  0:%.6f\0A\00", align 1
@.str8 = private unnamed_addr constant [29 x i8] c"1 value:\0A  0:%.6f %.6f %.6f\0A\00", align 1
@.str17 = private unnamed_addr constant [37 x i8] c"i < 3 && \22Vector index out of range\22\00", align 1
@.str18 = private unnamed_addr constant [16 x i8] c"../ops/OpVec3.h\00", align 1
@__PRETTY_FUNCTION__._ZN6OpVec3ixEj = private unnamed_addr constant [40 x i8] c"float &OpVec3::operator[](unsigned int)\00", align 1
@RslPublicFunctions = global %struct.RslFunctionTable.6 { %struct.RslFunction* getelementptr inbounds ([2 x %struct.RslFunction]* @gCgRslFunctions, i32 0, i32 0), i8 5, void (%class.RixContext.0*)* null, void (%class.RixContext.0*)* null }, align 8
@llvm.global_ctors = appending global [0 x { i32, void ()* }] zeroinitializer
@gCgRslFunctions = constant [2 x %struct.RslFunction] [%struct.RslFunction { i8* getelementptr inbounds ([75 x i8]* @0, i32 0, i32 0), i32 (%class.RslContext.1*, i32, %class.RslArg.4**)* @TestCgShader1, void (%class.RixContext.0*)* null, void (%class.RixContext.0*)* null }, %struct.RslFunction zeroinitializer]

declare void @__assert_fail(i8*, i8*, i32, i8*) noreturn nounwind

declare i32 @printf(i8* nocapture, ...) nounwind

declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture, i8* nocapture, i64, i32, i1) nounwind

define i32 @CgEntryFunc(%class.RslContext.1* nocapture %rslContext, i32 %argc, %class.RslArg.4** nocapture %argv) nounwind uwtable readnone {
  ret i32 0
}

define void @TestCgShader1_kernel(float* noalias nocapture %_a, float* noalias nocapture %_b, %class.OpVec3* noalias nocapture %_Ci, %class.OpVec3* noalias nocapture %_Cs, %class.OpVec3* noalias nocapture %_Ps) {
entry:
  %_2_f = alloca float
  %0 = load float* %_b
  %1 = load float* %_a
  call void @OpAdd_ff(float* %_b, float %0, float %1)
  %2 = load float* %_a
  call void @OpPrint_f(float %2)
  %3 = load float* %_b
  call void @OpPrint_f(float %3)
  call void @OpPrint_t(%class.OpVec3* %_Ps)
  call void @OpAssign_tt(%class.OpVec3* %_Ci, %class.OpVec3* %_Cs)
  %4 = load float* %_a
  call void @OpAdd_ff(float* %_b, float %4, float 1.000000e+00)
  call void @OpComp(float* %_2_f, %class.OpVec3* %_Ps, float 0.000000e+00)
  %5 = load float* %_2_f
  call void @OpPrint_f(float %5)
  ret void
}

define i32 @TestCgShader1(%class.RslContext.1* nocapture %rslContext, i32 %argc, %class.RslArg.4** nocapture %argv) nounwind uwtable readnone {
  %_Ps_iter = alloca %struct.CgIter
  %_Cs_iter = alloca %struct.CgIter
  %_Ci_iter = alloca %struct.CgIter
  %_b_iter = alloca %struct.CgIter
  %_a_iter = alloca %struct.CgIter
  call void @CgGetIter(%class.RslArg.4** %argv, i32 1, %struct.CgIter* %_a_iter)
  call void @CgGetIter(%class.RslArg.4** %argv, i32 2, %struct.CgIter* %_b_iter)
  call void @CgGetIter(%class.RslArg.4** %argv, i32 3, %struct.CgIter* %_Ci_iter)
  call void @CgGetIter(%class.RslArg.4** %argv, i32 4, %struct.CgIter* %_Cs_iter)
  call void @CgGetIter(%class.RslArg.4** %argv, i32 5, %struct.CgIter* %_Ps_iter)
  %1 = call i32 @CgNumValues(%class.RslArg.4** %argv, i32 0)
  br label %test

test:                                             ; preds = %body, %0
  %index = phi i32 [ 0, %0 ], [ %8, %body ]
  %2 = icmp slt i32 %index, %1
  br i1 %2, label %body, label %done

body:                                             ; preds = %test
  %3 = call float* @CgDerefIter(%struct.CgIter* %_a_iter)
  %4 = call float* @CgDerefIter(%struct.CgIter* %_b_iter)
  %5 = call float* @CgDerefIter(%struct.CgIter* %_Ci_iter)
  %_Ci_ptr = bitcast float* %5 to %class.OpVec3*
  %6 = call float* @CgDerefIter(%struct.CgIter* %_Cs_iter)
  %_Cs_ptr = bitcast float* %6 to %class.OpVec3*
  %7 = call float* @CgDerefIter(%struct.CgIter* %_Ps_iter)
  %_Ps_ptr = bitcast float* %7 to %class.OpVec3*
  call void @TestCgShader1_kernel(float* %3, float* %4, %class.OpVec3* %_Ci_ptr, %class.OpVec3* %_Cs_ptr, %class.OpVec3* %_Ps_ptr)
  call void @CgIncIter(%struct.CgIter* %_a_iter)
  call void @CgIncIter(%struct.CgIter* %_b_iter)
  call void @CgIncIter(%struct.CgIter* %_Ci_iter)
  call void @CgIncIter(%struct.CgIter* %_Cs_iter)
  call void @CgIncIter(%struct.CgIter* %_Ps_iter)
  %8 = add i32 %index, 1
  br label %test

done:                                             ; preds = %test
  ret i32 0
}
void TestCgShader1(uniform float a, float b, color Ci, color Cs, point Ps)
{
    #line 3 "TestCgShader1.sl"
    b = add(b, a);
    print(a);
    print(b);
    print(Ps);
    Ci = assign(Cs);
    b = add(a, 1);
    2_f = comp(Ps, 0);
    print(2_f);
}

surface TestCgShader1(
    uniform float a = assign(1);
    output varying float b = assign(0);
    )
{
    varying float 2_f;
    varying float TT_0;

    TT_0 = TestCgShader1(a, b, Ci, Cs, Ps);
}
---------- TestCgShader2.slo ----------
@RslPublicFunctions = global %struct.RslFunctionTable.6 { %struct.RslFunction* getelementptr inbounds ([2 x %struct.RslFunction]* @gCgRslFunctions, i32 0, i32 0), i8 5, void (%class.RixContext.0*)* null, void (%class.RixContext.0*)* null }, align 8
@llvm.global_ctors = appending global [0 x { i32, void ()* }] zeroinitializer
@gCgRslFunctions = constant [2 x %struct.RslFunction] [%struct.RslFunction { i8* getelementptr inbounds ([36 x i8]* @0, i32 0, i32 0), i32 (%class.RslContext.1*, i32, %class.RslArg.4**)* @TestCgShader2, void (%class.RixContext.0*)* null, void (%class.RixContext.0*)* null }, %struct.RslFunction zeroinitializer]

declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture, i8* nocapture, i64, i32, i1) nounwind

define i32 @CgEntryFunc(%class.RslContext.1* nocapture %rslContext, i32 %argc, %class.RslArg.4** nocapture %argv) nounwind uwtable readnone {
  ret i32 0
}

define void @TestCgShader2_kernel(float* noalias nocapture %_f) {
entry:
  %_2_x = alloca float
  %0 = load float* %_f
  call void @OpAdd_ff(float* %_2_x, float %0, float 1.000000e+00)
  ret void
}

define i32 @TestCgShader2(%class.RslContext.1* nocapture %rslContext, i32 %argc, %class.RslArg.4** nocapture %argv) nounwind uwtable readnone {
  %_f_iter = alloca %struct.CgIter
  call void @CgGetIter(%class.RslArg.4** %argv, i32 1, %struct.CgIter* %_f_iter)
  %1 = call i32 @CgNumValues(%class.RslArg.4** %argv, i32 0)
  br label %test

test:                                             ; preds = %body, %0
  %index = phi i32 [ 0, %0 ], [ %4, %body ]
  %2 = icmp slt i32 %index, %1
  br i1 %2, label %body, label %done

body:                                             ; preds = %test
  %3 = call float* @CgDerefIter(%struct.CgIter* %_f_iter)
  call void @TestCgShader2_kernel(float* %3)
  call void @CgIncIter(%struct.CgIter* %_f_iter)
  %4 = add i32 %index, 1
  br label %test

done:                                             ; preds = %test
  ret i32 0
}
void TestCgShader2(uniform float f)
{
    #line 11 "TestCgShader2.sl"
    2_x = add(f, 1);
}

surface TestCgShader2(
    uniform float f = assign(0);
    uniform point p = assign(0);
    uniform matrix m = assignmatrix(0);
    uniform string str = assign("hello");
    uniform float[3] fa;
    uniform point[3] pa;
    uniform string[3] sa = (arrayassign(sa, 0, ""), arrayassign(sa, 1, ""), arrayassign(sa, 2, ""), sa);
    )
{
    varying float 2_x;
    uniform float TT_0;

    TT_0 = TestCgShader2(f);
}
---------- TestRudyCSkin.slo ----------
@RslPublicFunctions = global %struct.RslFunctionTable.6 { %struct.RslFunction* getelementptr inbounds ([7 x %struct.RslFunction]* @gCgRslFunctions, i32 0, i32 0), i8 5, void (%class.RixContext.0*)* null, void (%class.RixContext.0*)* null }, align 8
@llvm.global_ctors = appending global [0 x { i32, void ()* }] zeroinitializer
@gCgRslFunctions = constant [7 x %struct.RslFunction] [%struct.RslFunction { i8* getelementptr inbounds ([30 x i8]* @0, i32 0, i32 0), i32 (%class.RslContext.1*, i32, %class.RslArg.4**)* @TestRudyCSkin, void (%class.RixContext.0*)* null, void (%class.RixContext.0*)* null }, %struct.RslFunction { i8* getelementptr inbounds ([62 x i8]* @1, i32 0, i32 0), i32 (%class.RslContext.1*, i32, %class.RslArg.4**)* @efresnel, void (%class.RixContext.0*)* null, void (%class.RixContext.0*)* null }, %struct.RslFunction { i8* getelementptr inbounds ([152 x i8]* @2, i32 0, i32 0), i32 (%class.RslContext.1*, i32, %class.RslArg.4**)* @TestRudyCSkin1, void (%class.RixContext.0*)* null, void (%class.RixContext.0*)* null }, %struct.RslFunction { i8* getelementptr inbounds ([66 x i8]* @3, i32 0, i32 0), i32 (%class.RslContext.1*, i32, %class.RslArg.4**)* @efresnel2, void (%class.RixContext.0*)* null, void (%class.RixContext.0*)* null }, %struct.RslFunction { i8* getelementptr inbounds ([173 x i8]* @4, i32 0, i32 0), i32 (%class.RslContext.1*, i32, %class.RslArg.4**)* @TestRudyCSkin3, void (%class.RixContext.0*)* null, void (%class.RixContext.0*)* null }, %struct.RslFunction { i8* getelementptr inbounds ([41 x i8]* @5, i32 0, i32 0), i32 (%class.RslContext.1*, i32, %class.RslArg.4**)* @TestRudyCSkin4, void (%class.RixContext.0*)* null, void (%class.RixContext.0*)* null }, %struct.RslFunction zeroinitializer]

declare float @fabsf(float) nounwind readnone

declare float @expf(float) nounwind

declare float @llvm.pow.f32(float, float) nounwind readonly

declare float @sqrtf(float) nounwind readnone

declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture, i8* nocapture, i64, i32, i1) nounwind

define i32 @CgEntryFunc(%class.RslContext.1* nocapture %rslContext, i32 %argc, %class.RslArg.4** nocapture %argv) nounwind uwtable readnone {
  ret i32 0
}

define void @TestRudyCSkin_kernel(%class.OpVec3* noalias nocapture %_5_C) {
entry:
  call void @OpAssign_tf(%class.OpVec3* %_5_C, float 0.000000e+00)
  ret void
}

define i32 @TestRudyCSkin(%class.RslContext.1* nocapture %rslContext, i32 %argc, %class.RslArg.4** nocapture %argv) nounwind uwtable readnone {
  %_5_C_iter = alloca %struct.CgIter
  call void @CgGetIter(%class.RslArg.4** %argv, i32 1, %struct.CgIter* %_5_C_iter)
  %1 = call i32 @CgNumValues(%class.RslArg.4** %argv, i32 0)
  br label %test

test:                                             ; preds = %body, %0
  %index = phi i32 [ 0, %0 ], [ %4, %body ]
  %2 = icmp slt i32 %index, %1
  br i1 %2, label %body, label %done

body:                                             ; preds = %test
  %3 = call float* @CgDerefIter(%struct.CgIter* %_5_C_iter)
  %_5_C_ptr = bitcast float* %3 to %class.OpVec3*
  call void @TestRudyCSkin_kernel(%class.OpVec3* %_5_C_ptr)
  call void @CgIncIter(%struct.CgIter* %_5_C_iter)
  %4 = add i32 %index, 1
  br label %test

done:                                             ; preds = %test
  ret i32 0
}

define void @efresnel_kernel(%class.OpVec3* noalias nocapture %_3_T, float* noalias nocapture %_5_Kr, float* noalias nocapture %_5_Kt, %class.OpVec3* noalias nocapture %_5_T) {
entry:
  %0 = load float* %_5_Kr
  call void @OpSmoothStep(float* %_5_Kr, float 0.000000e+00, float 5.000000e-01, float %0)
  %1 = load float* %_5_Kr
  call void @OpSubtract_ff(float* %_5_Kt, float 1.000000e+00, float %1)
  call void @OpNormalize(%class.OpVec3* %_5_T, %class.OpVec3* %_3_T)
  ret void
}

define i32 @efresnel(%class.RslContext.1* nocapture %rslContext, i32 %argc, %class.RslArg.4** nocapture %argv) nounwind uwtable readnone {
  %_5_T_iter = alloca %struct.CgIter
  %_5_Kt_iter = alloca %struct.CgIter
  %_5_Kr_iter = alloca %struct.CgIter
  %_3_T_iter = alloca %struct.CgIter
  call void @CgGetIter(%class.RslArg.4** %argv, i32 1, %struct.CgIter* %_3_T_iter)
  call void @CgGetIter(%class.RslArg.4** %argv, i32 2, %struct.CgIter* %_5_Kr_iter)
  call void @CgGetIter(%class.RslArg.4** %argv, i32 3, %struct.CgIter* %_5_Kt_iter)
  call void @CgGetIter(%class.RslArg.4** %argv, i32 4, %struct.CgIter* %_5_T_iter)
  %1 = call i32 @CgNumValues(%class.RslArg.4** %argv, i32 0)
  br label %test

test:                                             ; preds = %body, %0
  %index = phi i32 [ 0, %0 ], [ %7, %body ]
  %2 = icmp slt i32 %index, %1
  br i1 %2, label %body, label %done

body:                                             ; preds = %test
  %3 = call float* @CgDerefIter(%struct.CgIter* %_3_T_iter)
  %_3_T_ptr = bitcast float* %3 to %class.OpVec3*
  %4 = call float* @CgDerefIter(%struct.CgIter* %_5_Kr_iter)
  %5 = call float* @CgDerefIter(%struct.CgIter* %_5_Kt_iter)
  %6 = call float* @CgDerefIter(%struct.CgIter* %_5_T_iter)
  %_5_T_ptr = bitcast float* %6 to %class.OpVec3*
  call void @efresnel_kernel(%class.OpVec3* %_3_T_ptr, float* %4, float* %5, %class.OpVec3* %_5_T_ptr)
  call void @CgIncIter(%struct.CgIter* %_3_T_iter)
  call void @CgIncIter(%struct.CgIter* %_5_Kr_iter)
  call void @CgIncIter(%struct.CgIter* %_5_Kt_iter)
  call void @CgIncIter(%struct.CgIter* %_5_T_iter)
  %7 = add i32 %index, 1
  br label %test

done:                                             ; preds = %test
  ret i32 0
}

define void @TestRudyCSkin_kernel1(%class.OpVec3* noalias nocapture %_5_C, float* noalias nocapture %_5_Kr, %class.OpVec3* noalias nocapture %_6_Ln, %class.OpVec3* noalias nocapture %_Cl, %class.OpVec3* noalias nocapture %_L, %class.OpVec3* noalias nocapture %_Nn, %class.OpVec3* noalias nocapture %_sheenColor, %class.OpVec3* noalias nocapture %_T18, %class.OpVec3* noalias nocapture %_Vf) {
entry:
  %_T10 = alloca float
  %_T7 = alloca %class.OpVec3
  %_T6 = alloca %class.OpVec3
  %_T5 = alloca i32
  %_T4 = alloca float
  %_6_H = alloca %class.OpVec3
  %_T3 = alloca %class.OpVec3
  call void @OpNormalize(%class.OpVec3* %_6_Ln, %class.OpVec3* %_L)
  call void @OpAdd_tt(%class.OpVec3* %_T3, %class.OpVec3* %_6_Ln, %class.OpVec3* %_Vf)
  call void @OpNormalize(%class.OpVec3* %_6_H, %class.OpVec3* %_T3)
  call void @OpDot(float* %_T4, %class.OpVec3* %_6_H, %class.OpVec3* %_Nn)
  %0 = load float* %_T4
  call void @OpGT(i32* %_T5, float %0, float 0.000000e+00)
  %1 = load i32* %_T5
  %tobool = icmp ne i32 %1, 0
  br i1 %tobool, label %then, label %else

then:                                             ; preds = %entry
  %2 = load float* %_5_Kr
  call void @OpScale_ft(%class.OpVec3* %_T6, float %2, %class.OpVec3* %_sheenColor)
  call void @OpMultiply_tt(%class.OpVec3* %_T7, %class.OpVec3* %_T6, %class.OpVec3* %_Cl)
  call void @OpDot(float* %_T4, %class.OpVec3* %_6_Ln, %class.OpVec3* %_Nn)
  %3 = load float* %_T4
  call void @OpScale_ft(%class.OpVec3* %_T6, float %3, %class.OpVec3* %_T7)
  call void @OpDot(float* %_T4, %class.OpVec3* %_6_H, %class.OpVec3* %_Nn)
  %4 = load float* %_T4
  call void @OpPow(float* %_T10, float %4, float 4.000000e+00)
  %5 = load float* %_T10
  call void @OpScale_ft(%class.OpVec3* %_T7, float %5, %class.OpVec3* %_T6)
  call void @OpAdd_tt(%class.OpVec3* %_5_C, %class.OpVec3* %_5_C, %class.OpVec3* %_T7)
  br label %ifcont

else:                                             ; preds = %entry
  br label %ifcont

ifcont:                                           ; preds = %else, %then
  %6 = load float* %_5_Kr
  call void @OpScale_ft(%class.OpVec3* %_T6, float %6, %class.OpVec3* %_sheenColor)
  call void @OpMultiply_tt(%class.OpVec3* %_T7, %class.OpVec3* %_T6, %class.OpVec3* %_Cl)
  call void @OpDot(float* %_T4, %class.OpVec3* %_6_Ln, %class.OpVec3* %_Nn)
  %7 = load float* %_T4
  call void @OpScale_ft(%class.OpVec3* %_T6, float %7, %class.OpVec3* %_T7)
  call void @OpScale_ft(%class.OpVec3* %_T7, float 0x3FC99999A0000000, %class.OpVec3* %_T6)
  call void @OpAdd_tt(%class.OpVec3* %_5_C, %class.OpVec3* %_5_C, %class.OpVec3* %_T7)
  call void @OpNegate_t(%class.OpVec3* %_T18, %class.OpVec3* %_6_Ln)
  ret void
}

define i32 @TestRudyCSkin1(%class.RslContext.1* nocapture %rslContext, i32 %argc, %class.RslArg.4** nocapture %argv) nounwind uwtable readnone {
  %_Vf_iter = alloca %struct.CgIter
  %_T18_iter = alloca %struct.CgIter
  %_sheenColor_iter = alloca %struct.CgIter
  %_Nn_iter = alloca %struct.CgIter
  %_L_iter = alloca %struct.CgIter
  %_Cl_iter = alloca %struct.CgIter
  %_6_Ln_iter = alloca %struct.CgIter
  %_5_Kr_iter = alloca %struct.CgIter
  %_5_C_iter = alloca %struct.CgIter
  call void @CgGetIter(%class.RslArg.4** %argv, i32 1, %struct.CgIter* %_5_C_iter)
  call void @CgGetIter(%class.RslArg.4** %argv, i32 2, %struct.CgIter* %_5_Kr_iter)
  call void @CgGetIter(%class.RslArg.4** %argv, i32 3, %struct.CgIter* %_6_Ln_iter)
  call void @CgGetIter(%class.RslArg.4** %argv, i32 4, %struct.CgIter* %_Cl_iter)
  call void @CgGetIter(%class.RslArg.4** %argv, i32 5, %struct.CgIter* %_L_iter)
  call void @CgGetIter(%class.RslArg.4** %argv, i32 6, %struct.CgIter* %_Nn_iter)
  call void @CgGetIter(%class.RslArg.4** %argv, i32 7, %struct.CgIter* %_sheenColor_iter)
  call void @CgGetIter(%class.RslArg.4** %argv, i32 8, %struct.CgIter* %_T18_iter)
  call void @CgGetIter(%class.RslArg.4** %argv, i32 9, %struct.CgIter* %_Vf_iter)
  %1 = call i32 @CgNumValues(%class.RslArg.4** %argv, i32 0)
  br label %test

test:                                             ; preds = %body, %0
  %index = phi i32 [ 0, %0 ], [ %12, %body ]
  %2 = icmp slt i32 %index, %1
  br i1 %2, label %body, label %done

body:                                             ; preds = %test
  %3 = call float* @CgDerefIter(%struct.CgIter* %_5_C_iter)
  %_5_C_ptr = bitcast float* %3 to %class.OpVec3*
  %4 = call float* @CgDerefIter(%struct.CgIter* %_5_Kr_iter)
  %5 = call float* @CgDerefIter(%struct.CgIter* %_6_Ln_iter)
  %_6_Ln_ptr = bitcast float* %5 to %class.OpVec3*
  %6 = call float* @CgDerefIter(%struct.CgIter* %_Cl_iter)
  %_Cl_ptr = bitcast float* %6 to %class.OpVec3*
  %7 = call float* @CgDerefIter(%struct.CgIter* %_L_iter)
  %_L_ptr = bitcast float* %7 to %class.OpVec3*
  %8 = call float* @CgDerefIter(%struct.CgIter* %_Nn_iter)
  %_Nn_ptr = bitcast float* %8 to %class.OpVec3*
  %9 = call float* @CgDerefIter(%struct.CgIter* %_sheenColor_iter)
  %_sheenColor_ptr = bitcast float* %9 to %class.OpVec3*
  %10 = call float* @CgDerefIter(%struct.CgIter* %_T18_iter)
  %_T18_ptr = bitcast float* %10 to %class.OpVec3*
  %11 = call float* @CgDerefIter(%struct.CgIter* %_Vf_iter)
  %_Vf_ptr = bitcast float* %11 to %class.OpVec3*
  call void @TestRudyCSkin_kernel1(%class.OpVec3* %_5_C_ptr, float* %4, %class.OpVec3* %_6_Ln_ptr, %class.OpVec3* %_Cl_ptr, %class.OpVec3* %_L_ptr, %class.OpVec3* %_Nn_ptr, %class.OpVec3* %_sheenColor_ptr, %class.OpVec3* %_T18_ptr, %class.OpVec3* %_Vf_ptr)
  call void @CgIncIter(%struct.CgIter* %_5_C_iter)
  call void @CgIncIter(%struct.CgIter* %_5_Kr_iter)
  call void @CgIncIter(%struct.CgIter* %_6_Ln_iter)
  call void @CgIncIter(%struct.CgIter* %_Cl_iter)
  call void @CgIncIter(%struct.CgIter* %_L_iter)
  call void @CgIncIter(%struct.CgIter* %_Nn_iter)
  call void @CgIncIter(%struct.CgIter* %_sheenColor_iter)
  call void @CgIncIter(%struct.CgIter* %_T18_iter)
  call void @CgIncIter(%struct.CgIter* %_Vf_iter)
  %12 = add i32 %index, 1
  br label %test

done:                                             ; preds = %test
  ret i32 0
}

define void @efresnel_kernel2(%class.OpVec3* noalias nocapture %_3_T, float* noalias nocapture %_5_Kr2, float* noalias nocapture %_5_Kt2, %class.OpVec3* noalias nocapture %_6_T2) {
entry:
  %0 = load float* %_5_Kr2
  call void @OpSmoothStep(float* %_5_Kr2, float 0.000000e+00, float 5.000000e-01, float %0)
  %1 = load float* %_5_Kr2
  call void @OpSubtract_ff(float* %_5_Kt2, float 1.000000e+00, float %1)
  call void @OpNormalize(%class.OpVec3* %_6_T2, %class.OpVec3* %_3_T)
  ret void
}

define i32 @efresnel2(%class.RslContext.1* nocapture %rslContext, i32 %argc, %class.RslArg.4** nocapture %argv) nounwind uwtable readnone {
  %_6_T2_iter = alloca %struct.CgIter
  %_5_Kt2_iter = alloca %struct.CgIter
  %_5_Kr2_iter = alloca %struct.CgIter
  %_3_T_iter = alloca %struct.CgIter
  call void @CgGetIter(%class.RslArg.4** %argv, i32 1, %struct.CgIter* %_3_T_iter)
  call void @CgGetIter(%class.RslArg.4** %argv, i32 2, %struct.CgIter* %_5_Kr2_iter)
  call void @CgGetIter(%class.RslArg.4** %argv, i32 3, %struct.CgIter* %_5_Kt2_iter)
  call void @CgGetIter(%class.RslArg.4** %argv, i32 4, %struct.CgIter* %_6_T2_iter)
  %1 = call i32 @CgNumValues(%class.RslArg.4** %argv, i32 0)
  br label %test

test:                                             ; preds = %body, %0
  %index = phi i32 [ 0, %0 ], [ %7, %body ]
  %2 = icmp slt i32 %index, %1
  br i1 %2, label %body, label %done

body:                                             ; preds = %test
  %3 = call float* @CgDerefIter(%struct.CgIter* %_3_T_iter)
  %_3_T_ptr = bitcast float* %3 to %class.OpVec3*
  %4 = call float* @CgDerefIter(%struct.CgIter* %_5_Kr2_iter)
  %5 = call float* @CgDerefIter(%struct.CgIter* %_5_Kt2_iter)
  %6 = call float* @CgDerefIter(%struct.CgIter* %_6_T2_iter)
  %_6_T2_ptr = bitcast float* %6 to %class.OpVec3*
  call void @efresnel_kernel2(%class.OpVec3* %_3_T_ptr, float* %4, float* %5, %class.OpVec3* %_6_T2_ptr)
  call void @CgIncIter(%struct.CgIter* %_3_T_iter)
  call void @CgIncIter(%struct.CgIter* %_5_Kr2_iter)
  call void @CgIncIter(%struct.CgIter* %_5_Kt2_iter)
  call void @CgIncIter(%struct.CgIter* %_6_T2_iter)
  %7 = add i32 %index, 1
  br label %test

done:                                             ; preds = %test
  ret i32 0
}

define void @TestRudyCSkin_kernel3(%class.OpVec3* noalias nocapture %_5_C, float* noalias nocapture %_5_Kt, float* noalias nocapture %_5_Kt2, %class.OpVec3* noalias nocapture %_5_T, %class.OpVec3* noalias nocapture %_6_Ln, %class.OpVec3* noalias nocapture %_6_T2, %class.OpVec3* noalias nocapture %_Cl, %class.OpVec3* noalias nocapture %_Nn, %class.OpVec3* noalias nocapture %_skinColor, float* noalias nocapture %_thickness) {
entry:
  %_T66 = alloca float
  %_T43 = alloca float
  %_T38 = alloca float
  %_T10 = alloca float
  %_1_costheta = alloca float
  %_T3 = alloca %class.OpVec3
  %_2_won = alloca float
  %_2_win = alloca float
  %_T7 = alloca %class.OpVec3
  %_T4 = alloca float
  %_T6 = alloca %class.OpVec3
  call void @OpMultiply_tt(%class.OpVec3* %_T6, %class.OpVec3* %_skinColor, %class.OpVec3* %_Cl)
  call void @OpDot(float* %_T4, %class.OpVec3* %_6_Ln, %class.OpVec3* %_Nn)
  %0 = load float* %_T4
  call void @OpScale_ft(%class.OpVec3* %_T7, float %0, %class.OpVec3* %_T6)
  %1 = load float* %_5_Kt
  call void @OpScale_ft(%class.OpVec3* %_T6, float %1, %class.OpVec3* %_T7)
  %2 = load float* %_5_Kt2
  call void @OpScale_ft(%class.OpVec3* %_T7, float %2, %class.OpVec3* %_T6)
  call void @OpDot(float* %_T4, %class.OpVec3* %_5_T, %class.OpVec3* %_Nn)
  %3 = load float* %_T4
  call void @OpAbs(float* %_2_win, float %3)
  call void @OpDot(float* %_T4, %class.OpVec3* %_6_T2, %class.OpVec3* %_Nn)
  %4 = load float* %_T4
  call void @OpAbs(float* %_2_won, float %4)
  call void @OpNegate_t(%class.OpVec3* %_T3, %class.OpVec3* %_6_T2)
  call void @OpDot(float* %_1_costheta, %class.OpVec3* %_T3, %class.OpVec3* %_5_T)
  %5 = load float* %_1_costheta
  call void @OpMultiply_ff(float* %_T4, float 0x3FF99999A0000000, float %5)
  %6 = load float* %_T4
  call void @OpSubtract_ff(float* %_T10, float 0x3FFA3D70C0000000, float %6)
  %7 = load float* %_T10
  call void @OpPow(float* %_T4, float %7, float 1.500000e+00)
  %8 = load float* %_T4
  call void @OpDivide_ff(float* %_T10, float 0x3FD70A3D40000000, float %8)
  %9 = load float* %_2_win
  %10 = load float* %_2_won
  call void @OpAdd_ff(float* %_T4, float %9, float %10)
  %11 = load float* %_T10
  %12 = load float* %_T4
  call void @OpDivide_ff(float* %_T38, float %11, float %12)
  %13 = load float* %_T38
  call void @OpMultiply_ff(float* %_T4, float 0x3FE99999A0000000, float %13)
  %14 = load float* %_2_win
  call void @OpDivide_ff(float* %_T10, float 1.000000e+00, float %14)
  %15 = load float* %_2_won
  call void @OpDivide_ff(float* %_T38, float 1.000000e+00, float %15)
  %16 = load float* %_T10
  %17 = load float* %_T38
  call void @OpAdd_ff(float* %_T43, float %16, float %17)
  %18 = load float* %_T43
  call void @OpNegate_f(float* %_T10, float %18)
  %19 = load float* %_T10
  %20 = load float* %_thickness
  call void @OpMultiply_ff(float* %_T38, float %19, float %20)
  %21 = load float* %_T38
  call void @OpExp(float* %_T10, float %21)
  %22 = load float* %_T10
  call void @OpSubtract_ff(float* %_T38, float 1.000000e+00, float %22)
  %23 = load float* %_T4
  %24 = load float* %_T38
  call void @OpMultiply_ff(float* %_T10, float %23, float %24)
  call void @OpDot(float* %_T4, %class.OpVec3* %_5_T, %class.OpVec3* %_Nn)
  %25 = load float* %_T4
  call void @OpAbs(float* %_2_win, float %25)
  call void @OpDot(float* %_T4, %class.OpVec3* %_6_T2, %class.OpVec3* %_Nn)
  %26 = load float* %_T4
  call void @OpAbs(float* %_2_won, float %26)
  call void @OpNegate_t(%class.OpVec3* %_T3, %class.OpVec3* %_6_T2)
  call void @OpDot(float* %_1_costheta, %class.OpVec3* %_T3, %class.OpVec3* %_5_T)
  %27 = load float* %_1_costheta
  call void @OpMultiply_ff(float* %_T4, float 0x3FE3333340000000, float %27)
  %28 = load float* %_T4
  call void @OpSubtract_ff(float* %_T38, float 0x3FF170A3E0000000, float %28)
  %29 = load float* %_T38
  call void @OpPow(float* %_T4, float %29, float 1.500000e+00)
  %30 = load float* %_T4
  call void @OpDivide_ff(float* %_T38, float 0x3FED1EB840000000, float %30)
  %31 = load float* %_2_win
  %32 = load float* %_2_won
  call void @OpAdd_ff(float* %_T4, float %31, float %32)
  %33 = load float* %_T38
  %34 = load float* %_T4
  call void @OpDivide_ff(float* %_T43, float %33, float %34)
  %35 = load float* %_T43
  call void @OpMultiply_ff(float* %_T4, float 5.000000e-01, float %35)
  %36 = load float* %_2_win
  call void @OpDivide_ff(float* %_T38, float 1.000000e+00, float %36)
  %37 = load float* %_2_won
  call void @OpDivide_ff(float* %_T43, float 1.000000e+00, float %37)
  %38 = load float* %_T38
  %39 = load float* %_T43
  call void @OpAdd_ff(float* %_T66, float %38, float %39)
  %40 = load float* %_T66
  call void @OpNegate_f(float* %_T38, float %40)
  %41 = load float* %_T38
  %42 = load float* %_thickness
  call void @OpMultiply_ff(float* %_T43, float %41, float %42)
  %43 = load float* %_T43
  call void @OpExp(float* %_T38, float %43)
  %44 = load float* %_T38
  call void @OpSubtract_ff(float* %_T43, float 1.000000e+00, float %44)
  %45 = load float* %_T4
  %46 = load float* %_T43
  call void @OpMultiply_ff(float* %_T38, float %45, float %46)
  %47 = load float* %_T10
  %48 = load float* %_T38
  call void @OpAdd_ff(float* %_T4, float %47, float %48)
  call void @OpDot(float* %_T10, %class.OpVec3* %_5_T, %class.OpVec3* %_Nn)
  %49 = load float* %_T10
  call void @OpAbs(float* %_2_win, float %49)
  call void @OpDot(float* %_T10, %class.OpVec3* %_6_T2, %class.OpVec3* %_Nn)
  %50 = load float* %_T10
  call void @OpAbs(float* %_2_won, float %50)
  call void @OpNegate_t(%class.OpVec3* %_T3, %class.OpVec3* %_6_T2)
  call void @OpDot(float* %_1_costheta, %class.OpVec3* %_T3, %class.OpVec3* %_5_T)
  call void @OpAssign_ff(float* %_T10, float 1.000000e+00)
  %51 = load float* %_2_win
  %52 = load float* %_2_won
  call void @OpAdd_ff(float* %_T38, float %51, float %52)
  %53 = load float* %_T10
  %54 = load float* %_T38
  call void @OpDivide_ff(float* %_T43, float %53, float %54)
  %55 = load float* %_T43
  call void @OpMultiply_ff(float* %_T10, float 0x3FD99999A0000000, float %55)
  %56 = load float* %_2_win
  call void @OpDivide_ff(float* %_T38, float 1.000000e+00, float %56)
  %57 = load float* %_2_won
  call void @OpDivide_ff(float* %_T43, float 1.000000e+00, float %57)
  %58 = load float* %_T38
  %59 = load float* %_T43
  call void @OpAdd_ff(float* %_T66, float %58, float %59)
  %60 = load float* %_T66
  call void @OpNegate_f(float* %_T38, float %60)
  %61 = load float* %_T38
  %62 = load float* %_thickness
  call void @OpMultiply_ff(float* %_T43, float %61, float %62)
  %63 = load float* %_T43
  call void @OpExp(float* %_T38, float %63)
  %64 = load float* %_T38
  call void @OpSubtract_ff(float* %_T43, float 1.000000e+00, float %64)
  %65 = load float* %_T10
  %66 = load float* %_T43
  call void @OpMultiply_ff(float* %_T38, float %65, float %66)
  %67 = load float* %_T4
  %68 = load float* %_T38
  call void @OpAdd_ff(float* %_T10, float %67, float %68)
  %69 = load float* %_T10
  call void @OpScale_ft(%class.OpVec3* %_T6, float %69, %class.OpVec3* %_T7)
  call void @OpAdd_tt(%class.OpVec3* %_5_C, %class.OpVec3* %_5_C, %class.OpVec3* %_T6)
  ret void
}

define i32 @TestRudyCSkin3(%class.RslContext.1* nocapture %rslContext, i32 %argc, %class.RslArg.4** nocapture %argv) nounwind uwtable readnone {
  %_thickness_iter = alloca %struct.CgIter
  %_skinColor_iter = alloca %struct.CgIter
  %_Nn_iter = alloca %struct.CgIter
  %_Cl_iter = alloca %struct.CgIter
  %_6_T2_iter = alloca %struct.CgIter
  %_6_Ln_iter = alloca %struct.CgIter
  %_5_T_iter = alloca %struct.CgIter
  %_5_Kt2_iter = alloca %struct.CgIter
  %_5_Kt_iter = alloca %struct.CgIter
  %_5_C_iter = alloca %struct.CgIter
  call void @CgGetIter(%class.RslArg.4** %argv, i32 1, %struct.CgIter* %_5_C_iter)
  call void @CgGetIter(%class.RslArg.4** %argv, i32 2, %struct.CgIter* %_5_Kt_iter)
  call void @CgGetIter(%class.RslArg.4** %argv, i32 3, %struct.CgIter* %_5_Kt2_iter)
  call void @CgGetIter(%class.RslArg.4** %argv, i32 4, %struct.CgIter* %_5_T_iter)
  call void @CgGetIter(%class.RslArg.4** %argv, i32 5, %struct.CgIter* %_6_Ln_iter)
  call void @CgGetIter(%class.RslArg.4** %argv, i32 6, %struct.CgIter* %_6_T2_iter)
  call void @CgGetIter(%class.RslArg.4** %argv, i32 7, %struct.CgIter* %_Cl_iter)
  call void @CgGetIter(%class.RslArg.4** %argv, i32 8, %struct.CgIter* %_Nn_iter)
  call void @CgGetIter(%class.RslArg.4** %argv, i32 9, %struct.CgIter* %_skinColor_iter)
  call void @CgGetIter(%class.RslArg.4** %argv, i32 10, %struct.CgIter* %_thickness_iter)
  %1 = call i32 @CgNumValues(%class.RslArg.4** %argv, i32 0)
  br label %test

test:                                             ; preds = %body, %0
  %index = phi i32 [ 0, %0 ], [ %13, %body ]
  %2 = icmp slt i32 %index, %1
  br i1 %2, label %body, label %done

body:                                             ; preds = %test
  %3 = call float* @CgDerefIter(%struct.CgIter* %_5_C_iter)
  %_5_C_ptr = bitcast float* %3 to %class.OpVec3*
  %4 = call float* @CgDerefIter(%struct.CgIter* %_5_Kt_iter)
  %5 = call float* @CgDerefIter(%struct.CgIter* %_5_Kt2_iter)
  %6 = call float* @CgDerefIter(%struct.CgIter* %_5_T_iter)
  %_5_T_ptr = bitcast float* %6 to %class.OpVec3*
  %7 = call float* @CgDerefIter(%struct.CgIter* %_6_Ln_iter)
  %_6_Ln_ptr = bitcast float* %7 to %class.OpVec3*
  %8 = call float* @CgDerefIter(%struct.CgIter* %_6_T2_iter)
  %_6_T2_ptr = bitcast float* %8 to %class.OpVec3*
  %9 = call float* @CgDerefIter(%struct.CgIter* %_Cl_iter)
  %_Cl_ptr = bitcast float* %9 to %class.OpVec3*
  %10 = call float* @CgDerefIter(%struct.CgIter* %_Nn_iter)
  %_Nn_ptr = bitcast float* %10 to %class.OpVec3*
  %11 = call float* @CgDerefIter(%struct.CgIter* %_skinColor_iter)
  %_skinColor_ptr = bitcast float* %11 to %class.OpVec3*
  %12 = call float* @CgDerefIter(%struct.CgIter* %_thickness_iter)
  call void @TestRudyCSkin_kernel3(%class.OpVec3* %_5_C_ptr, float* %4, float* %5, %class.OpVec3* %_5_T_ptr, %class.OpVec3* %_6_Ln_ptr, %class.OpVec3* %_6_T2_ptr, %class.OpVec3* %_Cl_ptr, %class.OpVec3* %_Nn_ptr, %class.OpVec3* %_skinColor_ptr, float* %12)
  call void @CgIncIter(%struct.CgIter* %_5_C_iter)
  call void @CgIncIter(%struct.CgIter* %_5_Kt_iter)
  call void @CgIncIter(%struct.CgIter* %_5_Kt2_iter)
  call void @CgIncIter(%struct.CgIter* %_5_T_iter)
  call void @CgIncIter(%struct.CgIter* %_6_Ln_iter)
  call void @CgIncIter(%struct.CgIter* %_6_T2_iter)
  call void @CgIncIter(%struct.CgIter* %_Cl_iter)
  call void @CgIncIter(%struct.CgIter* %_Nn_iter)
  call void @CgIncIter(%struct.CgIter* %_skinColor_iter)
  call void @CgIncIter(%struct.CgIter* %_thickness_iter)
  %13 = add i32 %index, 1
  br label %test

done:                                             ; preds = %test
  ret i32 0
}

define void @TestRudyCSkin_kernel4(%class.OpVec3* noalias nocapture %_5_C, %class.OpVec3* noalias nocapture %_Ci) {
entry:
  call void @OpAssign_tt(%class.OpVec3* %_Ci, %class.OpVec3* %_5_C)
  ret void
}

define i32 @TestRudyCSkin4(%class.RslContext.1* nocapture %rslContext, i32 %argc, %class.RslArg.4** nocapture %argv) nounwind uwtable readnone {
  %_Ci_iter = alloca %struct.CgIter
  %_5_C_iter = alloca %struct.CgIter
  call void @CgGetIter(%class.RslArg.4** %argv, i32 1, %struct.CgIter* %_5_C_iter)
  call void @CgGetIter(%class.RslArg.4** %argv, i32 2, %struct.CgIter* %_Ci_iter)
  %1 = call i32 @CgNumValues(%class.RslArg.4** %argv, i32 0)
  br label %test

test:                                             ; preds = %body, %0
  %index = phi i32 [ 0, %0 ], [ %5, %body ]
  %2 = icmp slt i32 %index, %1
  br i1 %2, label %body, label %done

body:                                             ; preds = %test
  %3 = call float* @CgDerefIter(%struct.CgIter* %_5_C_iter)
  %_5_C_ptr = bitcast float* %3 to %class.OpVec3*
  %4 = call float* @CgDerefIter(%struct.CgIter* %_Ci_iter)
  %_Ci_ptr = bitcast float* %4 to %class.OpVec3*
  call void @TestRudyCSkin_kernel4(%class.OpVec3* %_5_C_ptr, %class.OpVec3* %_Ci_ptr)
  call void @CgIncIter(%struct.CgIter* %_5_C_iter)
  call void @CgIncIter(%struct.CgIter* %_Ci_iter)
  %5 = add i32 %index, 1
  br label %test

done:                                             ; preds = %test
  ret i32 0
}
void TestRudyCSkin(color 5_C)
{
    #line 38 "TestRudyCSkin.sl"
    5_C = assign(0);
}

void efresnel(vector 3_T, float 5_Kr, float 5_Kt, vector 5_T)
{
    #line 26 "TestRudyCSkin.sl"
    5_Kr = smoothstep(0, 0.5, 5_Kr);
    5_Kt = subtract(1, 5_Kr);
    5_T = normalize(3_T);
}

void TestRudyCSkin1(color 5_C, float 5_Kr, vector 6_Ln, color Cl, vector L, uniform normal Nn, uniform color sheenColor, vector T18, uniform vector Vf)
{
    #line 43 "TestRudyCSkin.sl"
    6_Ln = normalize(L);
    T3 = add(6_Ln, Vf);
    6_H = normalize(T3);
    T4 = dot(6_H, Nn);
    T5 = gt(T4, 0);
    if (T5) {
        T6 = scale(5_Kr, sheenColor);
        T7 = multiply(T6, Cl);
        T4 = dot(6_Ln, Nn);
        T6 = scale(T4, T7);
        T4 = dot(6_H, Nn);
        T10 = pow(T4, 4);
        T7 = scale(T10, T6);
        5_C = add(5_C, T7);
    }
    T6 = scale(5_Kr, sheenColor);
    T7 = multiply(T6, Cl);
    T4 = dot(6_Ln, Nn);
    T6 = scale(T4, T7);
    T7 = scale(0.2, T6);
    5_C = add(5_C, T7);
    T18 = negate(6_Ln);
}

void efresnel2(vector 3_T, float 5_Kr2, float 5_Kt2, vector 6_T2)
{
    #line 26 "TestRudyCSkin.sl"
    5_Kr2 = smoothstep(0, 0.5, 5_Kr2);
    5_Kt2 = subtract(1, 5_Kr2);
    6_T2 = normalize(3_T);
}

void TestRudyCSkin3(color 5_C, float 5_Kt, float 5_Kt2, vector 5_T, vector 6_Ln, vector 6_T2, color Cl, uniform normal Nn, uniform color skinColor, uniform float thickness)
{
    #line 51 "TestRudyCSkin.sl"
    T6 = multiply(skinColor, Cl);
    T4 = dot(6_Ln, Nn);
    T7 = scale(T4, T6);
    T6 = scale(5_Kt, T7);
    T7 = scale(5_Kt2, T6);
    { // singleScatter
        #line 16 "TestRudyCSkin.sl"
        T4 = dot(5_T, Nn);
        2_win = abs(T4);
        T4 = dot(6_T2, Nn);
        2_won = abs(T4);
        { // phase
            #line 11 "TestRudyCSkin.sl"
            T3 = negate(6_T2);
            1_costheta = dot(T3, 5_T);
            T4 = multiply(1.6, 1_costheta);
            T10 = subtract(1.64, T4);
            T4 = pow(T10, 1.5);
            T10 = divide(0.36, T4);
        } // phase
        #line 19 "TestRudyCSkin.sl"
        T4 = add(2_win, 2_won);
        T38 = divide(T10, T4);
        T4 = multiply(0.8, T38);
        T10 = divide(1, 2_win);
        T38 = divide(1, 2_won);
        T43 = add(T10, T38);
        T10 = negate(T43);
        T38 = multiply(T10, thickness);
        T10 = exp(T38);
        T38 = subtract(1, T10);
        T10 = multiply(T4, T38);
    } // singleScatter
    { // singleScatter
        #line 16 "TestRudyCSkin.sl"
        T4 = dot(5_T, Nn);
        2_win = abs(T4);
        T4 = dot(6_T2, Nn);
        2_won = abs(T4);
        { // phase
            #line 11 "TestRudyCSkin.sl"
            T3 = negate(6_T2);
            1_costheta = dot(T3, 5_T);
            T4 = multiply(0.6, 1_costheta);
            T38 = subtract(1.09, T4);
            T4 = pow(T38, 1.5);
            T38 = divide(0.91, T4);
        } // phase
        #line 19 "TestRudyCSkin.sl"
        T4 = add(2_win, 2_won);
        T43 = divide(T38, T4);
        T4 = multiply(0.5, T43);
        T38 = divide(1, 2_win);
        T43 = divide(1, 2_won);
        T66 = add(T38, T43);
        T38 = negate(T66);
        T43 = multiply(T38, thickness);
        T38 = exp(T43);
        T43 = subtract(1, T38);
        T38 = multiply(T4, T43);
    } // singleScatter
    #line 53 "TestRudyCSkin.sl"
    T4 = add(T10, T38);
    { // singleScatter
        #line 16 "TestRudyCSkin.sl"
        T10 = dot(5_T, Nn);
        2_win = abs(T10);
        T10 = dot(6_T2, Nn);
        2_won = abs(T10);
        { // phase
            #line 11 "TestRudyCSkin.sl"
            T3 = negate(6_T2);
            1_costheta = dot(T3, 5_T);
            T10 = assign(1);
        } // phase
        #line 19 "TestRudyCSkin.sl"
        T38 = add(2_win, 2_won);
        T43 = divide(T10, T38);
        T10 = multiply(0.4, T43);
        T38 = divide(1, 2_win);
        T43 = divide(1, 2_won);
        T66 = add(T38, T43);
        T38 = negate(T66);
        T43 = multiply(T38, thickness);
        T38 = exp(T43);
        T43 = subtract(1, T38);
        T38 = multiply(T10, T43);
    } // singleScatter
    #line 54 "TestRudyCSkin.sl"
    T10 = add(T4, T38);
    T6 = scale(T10, T7);
    5_C = add(5_C, T6);
}

void TestRudyCSkin4(color 5_C, color Ci)
{
    #line 56 "TestRudyCSkin.sl"
    Ci = assign(5_C);
}

surface TestRudyCSkin(
    uniform vector Vf = assign(0);
    uniform normal Nn = assign(0);
    uniform color skinColor = assign(0);
    uniform color sheenColor = assign(0);
    uniform float eta = assign(0);
    uniform float thickness = assign(0);
    )
{
    varying float 1_costheta;
    varying float 2_win;
    varying float 2_won;
    varying vector 3_R;
    varying vector 3_T;
    varying float 5_Kr;
    varying float 5_Kt;
    varying float 5_Kr2;
    varying float 5_Kt2;
    varying color 5_C;
    varying vector 5_T;
    varying vector 6_Ln;
    varying vector 6_H;
    varying vector 6_T2;
    uniform vector T0;
    varying bool T1;
    varying vector T3;
    varying float T4;
    varying bool T5;
    varying color T6;
    varying color T7;
    varying float T10;
    varying vector T18;
    varying float T38;
    varying float T43;
    varying float T66;
    varying float TT_0;
    varying float TT_1;
    varying float TT_2;
    varying float TT_3;
    varying float TT_4;
    varying float TT_5;

    TT_0 = TestRudyCSkin(5_C);
    #line 40 "TestRudyCSkin.sl"
    T0 = negate(Vf);
    { // efresnel
        #line 25 "TestRudyCSkin.sl"
        fresnel(T0, Nn, eta, 5_Kr, 5_Kt, 3_R, 3_T);
        TT_1 = efresnel(3_T, 5_Kr, 5_Kt, 5_T);
    } // efresnel
    #line 42 "TestRudyCSkin.sl"
    lightingstart(Vf, Nn, skinColor, sheenColor, eta, thickness, 3_R, 3_T, 5_Kr, 5_Kt, 5_C, 5_T);
    illuminance (Ps, Nn, 1.5708) {
        TT_2 = TestRudyCSkin1(5_C, 5_Kr, 6_Ln, Cl, L, Nn, sheenColor, T18, Vf);
        { // efresnel
            #line 25 "TestRudyCSkin.sl"
            fresnel(T18, Nn, eta, 5_Kr2, 5_Kt2, 3_R, 3_T);
            TT_3 = efresnel2(3_T, 5_Kr2, 5_Kt2, 6_T2);
        } // efresnel
        TT_4 = TestRudyCSkin3(5_C, 5_Kt, 5_Kt2, 5_T, 6_Ln, 6_T2, Cl, Nn, skinColor, thickness);
    }
    TT_5 = TestRudyCSkin4(5_C, Ci);
}
[       OK ] TestCgShader.TestShaders
[----------] Global test environment tear-down
[==========] 6 tests from 1 test case ran.
[  PASSED  ] 6 tests.
